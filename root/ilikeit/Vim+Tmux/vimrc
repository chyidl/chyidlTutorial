"  >> Copyright 2020- chyidl (@Chyi Yaqing)
" Terminal font == Hack Nerd Font 
" :set paste in vim before you paste to disable automated indenting, 
" :set nopaste after you've pasted the content.
" Vim Run omit any of your vimrc settings and plugins 
" vim -u NONE

set nocompatible              " be iMproved, required
filetype off                  " required

" Automatic installation vim-plug 
" vim-plug : A minimalist Vim plugin manager
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif 

" alternatively, pass a path where vim-plug should install plugins
call plug#begin('~/.vim/plugged')

" Color Scheme 
Plug 'challenger-deep-theme/vim', { 'as': 'challenger-deep' }

" Status Bar 
Plug 'itchyny/lightline.vim'                " A light and configurable statusline/tabline plugin for Vim

" File Explorer.
Plug 'preservim/nerdtree'                   " A tree explorer plugin for vim  
Plug 'Xuyuanp/nerdtree-git-plugin'          " A plugin of NERDTree showing git status
Plug 'ryanoasis/vim-devicons'               " Adds file type icons to Vim Plugins

" Intellisense engine for vim8, full language server protocol support as VSCode 
" Install nodejs 
" $ curl -sL install-node.now.sh/lts | bash
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Visualization Enchange 
Plug 'Yggdroot/indentLine'                  " A vim plugin to display the indention levels with thin vertical lines

" Show a diff using Vim its sign column 
Plug 'mhinz/vim-signify', { 'branch': 'master' }

" Vim plugin, insert or delete brackets,parens,quotes in pair 
"Plug 'jiangmiao/auto-pairs'

" Comment stuff out 
Plug 'tpope/vim-commentary'                 " Type '\\' aka <Leader><Leader> to quick (un)comment line(s)

" True Sublime Text Style multiple selections for Vim 
Plug 'terryma/vim-multiple-cursors'

" Lightning fast left-right movement in Vim 
Plug 'unblevable/quick-scope'

" ALE(Asynchronous Lint Engine) is a plugin prividing linting(syntax cheacking and semantic errors)
Plug 'dense-analysis/ale'

" A command-line fuzzy finder 
" PlugInstall and PlugUpdate will clone fzf in ~/.fzf and run the install script 
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" An ack.vim alternative mimics Ctrl-Shift-F on Sublime Text 2
" install ack, ag, pt, rg
Plug 'dyng/ctrlsf.vim'

" Language: Javascript 
" Vastyly improved Javascript indentation and syntax support in Vim.
Plug 'pangloss/vim-javascript'

" Language: Python 
" Python syntax highlighting for Vim 
Plug 'vim-python/python-syntax'

" Language: C/C++ 
" Additional Vim syntax highlighting for C++ (including C++11/14/17)
Plug 'octol/vim-cpp-enhanced-highlight'

" Language: Go 
" Go development plugin for Vim 
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

" Language: Rust 
" Vim configuration for Rust 
Plug 'rust-lang/rust.vim'

" Language: Markdown 
" Markdown for Vim: a complete environment to create Markdown files with a syntax highlight that doesn't suck! 
Plug 'gabrielelana/vim-markdown'

" Language: Misc 
" A better JSON for Vim: distinct highlighting of keywords vs values, JSON-specific (non-JS) warnings, quote concealing. Pathpgen-friendly 
Plug 'elzr/vim-json'

" Vim support for editing fish scripts 
Plug 'dag/vim-fish'

" Vim syntax for TOML 
Plug 'cespare/vim-toml'

" Override vim syntax for yaml files 
Plug 'stephpy/vim-yaml'

" An up-to-date jinja2 syntax file. 
Plug 'Glench/Vim-Jinja2-Syntax'

" Your Swiss Army Knife for Protocol Buffers 
Plug 'uber/prototool', { 'rtp': 'vim/prototool' }

" Language: Qml 
" QML syntax highlighting for VIM 
Plug 'peterhoeg/vim-qml'

" Language: Typescript 
" Typescript syntax files for Vim 
Plug 'leafgarland/typescript-vim'

" LaTeX files - A modern vim plugin for editing 
Plug 'lervag/vimtex'

" Vim syntax highlighting for Google's Protocol Buffers 
Plug 'uarun/vim-protobuf'

" Initialize plugin system
call plug#end()                     " required
" :Brief help
" :PlugInstall [name ...] [#threads]    -   Install plugins 
" :PlugUpdate [name ...] [#threads]     -   Install or update plugins 
" :PlugClean[!]     - confirms removal of unlisted plugins; append `!` to auto-approve removal
" :PlugUpgrade                          -   Upgrade vim-plug itself
" :PlugStatus                           -   Check the status of plugins
" :PlugDiff                             -   Examine changes from the previous update and the pending changes
" :PlugSnapshot[!] [output path]        -   Generate script for restoring the current snapshot of the plugins


" Put your non-Plugin stuff after this line
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" BASIC  
" Sections:
" 	-> General 
" 	-> VIM user interface 
" 	-> Colors and Fonts
" 	-> Files and backups
" 	-> Text, Tab and indent related 
" 	-> Visual mode related 
" 	-> Moving around, tabs and buffers
" 	-> Status line
" 	-> Editong mappings
" 	-> vimgrep searching and cope displaying 
" 	-> Spell checking 
" 	-> Misc 
" 	-> Helper functions 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Highlight trailing whitespaces as red. 
highlight ExtraWhitespace ctermbg=red guibg=#EC7063
match ExtraWhitespace /\s\+$/

" Sets how many lines of history VIM has to remember 
set history=500

" Disable bells 
set noeb 

" Force vim to use a older version of regex engine and it is actually FASTER. 
set re=1

" Show line numbers.
set nu

" Don't perform highlight on lines that are longer than 180 chars. 
set synmaxcol=180 
syntax sync minlines=256

" Don't show command in the last line of screen. 
set noshowcmd 

" If in Insert, Replace or Visual mode put a message on the last line. 
set showmode 

" Lines longer than the width of window will wrap and displaying continues on the next line. 
set nowrap

" Auto switch current working directory to current editing file's directory. 
set autochdir

" Enable filetype plugins 
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on

" Set to auto read when a file is changed from the outside 
set autoread 

" With a map leader it's possible to do extra key combinations 
" like <leader>w saves the current file 
let mapleader = ","

" Fast saving 
nmap <leader>w :w!<cr>

" :W sudo saves the file 
" (useful for handling the permission-denied error)
command W w !sudo tee % > /dev/null


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Set 7 lines to the cursor - when moving vertically using j/k 
set so=7


" Avoid grabled characters in Chinese Language windows OS
let $LANG='en'
set langmenu=en
source $VIMRUNTIME/delmenu.vim 
source $VIMRUNTIME/menu.vim 

" Turn on the Wild menu 
set wildmenu 

" Ignore compiled files
set wildignore=*.o,*~,*.pyc
if has("win16") || has("win32")
	set wildignore+=.git\*,.hg\*,.svn\*
else
	set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
endif

" Always show current position 
set ruler

" Configure backspace so it acts as it should act 
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Ignore case when searching 
set ignorecase 

" The :s/<search-target>/<to-replace-with>/ is s///g by default 
set gdefault 

" Highlight search results 
set hlsearch 

" Makes search act like search in modern browsers
set incsearch 

" Don't redraw while executing macros (good performance config)
set lazyredraw 

" For regular expressions turn magic on 
set magic 

" Show matching brackets when text indicator is over them 
set showmatch 

" Tenths of a second to show the matching paren. 
set matchtime=1 

" How many tenths of a second to blink when matching brackets
set mat=2

" No annoying sound on errors 
set noerrorbells
set novisualbell 
set t_vb=
set tm=500

" Properly disable sound on errors on MacVim 
if has("gui_macvim")
	autocmd GUIEnter * set vb t_vb=
endif

set nofoldenable

" Add a bit extra margin to the left 
set foldcolumn=2

" Enable folding 
set foldmethod=indent
set foldlevel=5


" which commands trigger auto-unfold 
set foldopen=block,hor,insert,jump,mark,percent,quickfix,search,tag,undo 

" Close all folds (which level>foldlevel) automatically when cursor leaves. 
set foldclose=all

" Enable fold for programming languages. 
autocmd FileType c,go,python,javascript,bitproto,protobuf setlocal foldenable

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Makes terminal title is set by vim. 
set title 

" Restore old title after leaving vim. 
set titleold=

" Cursor which always stays in the middle of screen is cool. 
set scrolloff=9999

" Enable syntax highlighting 
syntax enable 

" Set extra options when running in GUI mode 
if has("gui_running")
	set guioptions-=T
	set guioptions-=e
	set t_Co=256
	set guitablabel=%M\ %t
    set background=dark
    colorscheme challenger_deep
else
	set t_Co=256
    set background=dark
    colorscheme challenger_deep
endif

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf-8

" Encoding that creating new files 
set fencs=utf-8

" Encoding that output to terminal 
set termencoding=utf-8 

" Encoding that saving files 
set fileencoding=utf-8 

" Use Unix as the standard file type
set ffs=unix,dos,mac

" highlight the current line and the cursor    
" Very slow scroll with cursorline enabled in newer versions of Vim #2584
set cursorline
set cursorcolumn

highlight CursorColumn guibg=lightblue ctermbg=8
" Dark grey, better you can get if you don't support 256 colors
highlight CursorLine cterm=NONE ctermbg=8 ctermfg=NONE

" Editing :: Copy/Paste 
" Tmux copy 
set clipboard=unnamed 

" Editing :: Completion. 
set completeopt=longest,menu 
set cpt=.,w,b


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nowb
set noswapfile


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Use spaces instead of tabs, by default (Python user's must-have).
set expandtab 

" Be smart when using tabs ;)
set smarttab

" 1 tab == 4 spaces 
set shiftwidth=4
set tabstop=4
" Number of spaces that a <Tab> counts for while editing. 
set softtabstop=4   

" Show tabs via listchars below, and display end sign after endo fline. 
set list 
set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮ "Chars that to display list.


" Linebreak on 500 characters 
set lbr
set tw=500

" Autoindent makes Cmd+V works wired, so when pasting something from clipboard into vim: 
" :set paste and the Cmd+V, and rollback paste settings via :set paste. 
"set autoindent "Auto indent 
set smartindent "Smart indent 
set wrap "Wrap lines


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Visual mode related 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Visual mode pressing * or # searches for the current selection 
" Super useful! From an idea by Michael Naumann 
vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>/<C-R>=@/<CR><CR>
vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@/<CR><CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs, windows and buffers 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Map<Space> to / (search) and Ctrl-<Space> to ? (backwards search)
map <space> /
map <c-space> ?

" Disable highlight when <leader><cr> is pressed 
map <silent> <leader><cr> :noh<cr>

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Close the current buffer 
map <leader>bd :Bclose<cr>:tabclose<cr>gT 

" Close all the buffers 
map <leader>ba :bufdo bd<cr>
map <leader>l :bnext<cr>
map <leader>h :bprevious<cr>

" Useful mappings for managing tabs 
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove
map <leader>t<leader> :tabnext

" Let 'tl' toggle between this and the last accessed tab 
let g:lasttab = 1
nmap <leader>tl :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr() 

" Opens a new tab with the current buffer's path 
" Super useful when editing files in the same directory 
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

" Switch CWD to the directory of the open buffer 
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Specify the behavior when switching between buffers 
try
    set switchbuf=useopen,usetab,newtab
    set stal=2
catch
endtry

" Return to the last edit position when opening files (You want this!)
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif 


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Status line
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Always show the status line on the last window 
set laststatus=2


" Format the status line 
set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l\ \ Column:\ %c


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Editing mappings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Remap VIM 0 to first non-blank character 
map H ^
map 0 ^
map L $

" Move a line of text using ALT+[jk] or Command+[jk] on mac 
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr> `z 
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

if has("mac") || has("macunix")
    nmap <D-j> <M-j>
    nmap <D-k> <M-k>
    vmap <D-j> <M-j>
    vmap <D-k> <M-k>
endif 

" Delete trailing white space on save, useful for some filetype ;)
fun! CleanExtraSpaces()
    let save_cursor = getpos(".")
    let old_query = getreg('/')
    silent! %s/\s\+$//e
    call setpos('.', save_cursor)
    call setreg('/', old_query)
endfun 

if has("autocmd")
    autocmd BufWritePre *.txt,*.js,*.py,*.wiki,*.sh,*.coffee :call CleanExtraSpaces()
endif 

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Pressing ,ss will toggle and untoggle spell checking 
map <leader>ss :setlocal spell!<cr>

" Shortcuts using <leader>
map <leader>sn ]s 
map <leader>sp [s
map <leader>sa zg 
map <leader>s? z= 

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Misc
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Removing the Windows ^M - when the encodings gets messed up 
noremap <Leader>m mmHmt:%s/<C-V><cr>//get<cr>'tzt'm

" Quickly open a buffer for scribble 
map <leader>q :e ~/buffer<cr>

" Quickly open a markdown buffer for scribble 
map <leader>x :e ~/buffer.md<cr>

" Toggle paste mode on and off 
map <leader>pp :setlocal paste!<cr>

" Press F5 in normal mode or in insert mode to insert the current datestamp 
nnoremap <F5> "=strftime("%Y-%m-%d %H:%M:%S %Z")<CR>P
inoremap <F5> <C-R>=strftime("%Y-%m-%d %H:%M:%S %Z")<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Returns true if paste mode is enabled 
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    endif
    return ''
endfunction

" Don't close window, when deleting a buffer 
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
    let l:currentBufNum = bufnr("%")
    let l:alternateBufNum = bufnr("#")

    if buflisted(l:alternateBufNum)
        buffer #
    else
        bnext
    endif

    if bufnr("%") == l:currentBufNum
        new
    endif

    if buflisted(l:currentBufNum)
        execute("bdelete! ".l:currentBufNum)
    endif
endfunction 

function! CmdLine(str)
    call feedkeys(":" . a:str)
endfunction

function! VisualSelection(direction, extra_filter) range 
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", "\\/.*'$^~[]")
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'gv'
        call CmdLine("Ack '" . l:pattern . "' ")
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    endif

    let @/ = l:pattern 
    let @" = l:saved_reg
endfunction


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => FILETYPES
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Tab settings for different language filetypes. 
autocmd FileType text setlocal textwidth=79
autocmd FileType go setlocal noexpandtab tabstop=4 shiftwidth=4 softtabstop=4 textwidth=79
autocmd FileType python setlocal tabstop=4 shiftwidth=4 softtabstop=4 textwidth=90
autocmd FileType ruby setlocal tabstop=2 shiftwidth=2 softtabstop=2 textwidth=79
autocmd FileType php setlocal tabstop=4 shiftwidth=4 softtabstop=4 textwidth=79
autocmd FileType coffee,javascript setlocal tabstop=2 shiftwidth=2 softtabstop=2 textwidth=79
autocmd FileType html,htmldjango,xhtml,haml setlocal tabstop=2 shiftwidth=2 softtabstop=2 textwidth=0
autocmd FileType sass,scss,css setlocal tabstop=2 shiftwidth=2 softtabstop=2 textwidth=79


" Shell Section 
if exists('$TMUX')
    if has('mvim')
        set termguicolors
        " Make vim to use /bin/sh instead of $SHELL 
        set shell=/bin/sh 
    else
        set shell=/bin/sh 
        set term=screen-256color
    endif
endif


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => lightline.vim 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:lightline = {
      \ 'colorscheme': 'challenger_deep',
      \ 'active': {
      \   'left': [ ['mode', 'paste'],
      \             ['fugitive', 'readonly', 'filename', 'modified'] ],
      \   'right': [ [ 'lineinfo' ], 
      \              ['percent'], 
      \              [ 'fileformat', 'fileencoding', 'filetype', 'charvaluehex' ] ]
      \ },
      \ 'component': {
      \   'readonly': '%{&filetype=="help"?"":&readonly?"🔒":""}',
      \   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}',
      \   'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}'
      \ },
      \ 'component_visible_condition': {
      \   'readonly': '(&filetype!="help"&& &readonly)',
      \   'modified': '(&filetype!="help"&&(&modified||!&modifiable))',
      \   'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())'
      \ },
      \ 'separator': { 'left': ' ', 'right': ' ' },
      \ 'subseparator': { 'left': ' ', 'right': ' ' }
      \ }


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => NERDTree Plugin Config 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Open NERDTree when start vim with no command line arguments
autocmd StdinReadPre * let s:std_in=1
autocmd vimenter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" close vim if the only window left open is a NERDTree? 
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Open and Close NERDTree 
map <leader>nn :NERDTreeToggle<cr>
"
" Quickly perform operations with NERDTreeFind
map <leader>nf :NERDTreeFind<cr>

" automatically close NERDTree When you open a file
let NERDTreeQuitOnOpen = 0
"
" automatically delete the buffer of the file just deleted with NERDTree
let NERDTreeAutoDeleteBuffer = 1
let g:NERDTreeWinPos = "left"
" Show hidden files, 
let NERDTreeShowHidden=1
let NERDTreeShowFiles=1
" Show line numnber for nerdtree 
let NERDTreeShowLineNumbers=1
" Don't display these files:
let NERDTreeIgnore = ['\.pyc$','\.o$', '\~$', '__pycache__', '\.mypy_cache', '\.DS_Store',
            \ '^\.git$', '\.o$', '.so$', '.egg$', '\.pytest_cache', '.swp$', '.swo$', '\.swn$']
" NERDtree window's width.
let g:NERDTreeWinSize=35
" Highlight the selected entry in the tree 
let NERDTreeHighlightCursorlin=1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => NERDTree-git Plugin Config
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => coc.nvim Plugin Config -- 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" if hidden is not set, TextEdit might fail. 
set hidden

" Some servers have issues with backup files 
set nobackup
set nowritebackup

" Better disaply for messages
set cmdheight=2

" default updatetime 4000ms is not good for async update
set updatetime=100

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns 
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
      let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~# '\s'
    endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <TAB> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

au FileType go,python,c,javascript,rust nmap <silent> gd <Plug>(coc-definition)

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => indentLine Plugin Config 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" indentLine overwrite conceal color with grey by default, highlight conceal concel color with your colorscheme 
" let g:indentLine_char = '|'
let g:indentLine_setColors = 0

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => auto-pairs Plugin Config 
" ""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Auto close pairs ((),{},[])

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => vim-commentary Plugin Config 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd FileType python,shell,coffee set commentstring=#\ %s 
autocmd FileType java,c,cpp,go set commentstring=//\ %s 
" gcc   comment out a line (takes a count)
" gc    comment out the target of a motion
" gcap  comment out a paragraph 

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => vim-multiple-cursors Plugin Config 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" It's great for quick refactoring
" Mapping 
" let g:multi_cursor_use_default_mapping=0 
" Default mapping 
" let g:multi_cursor_start_word_key         = '<C-n>'
" let g:multi_cursor_select_all_word_key    = '<A-n>'
" let g:multi_cursor_start_key              = 'g<C-n>'
" let g:multi_cursor_select_all_key         = 'g<A-n>'
" let g:multi_cursor_next_key               = '<C-n>'
" let g:multi_cursor_prev_key               = '<C-p>'
" let g:multi_cursor_skip_key               = '<C-x>'
" let g:multi_cursor_quit_key               = '<Esc>'
augroup MultipleCursorsSelectionFix
    autocmd User MultipleCursorsPre  if &selection ==# 'exclusive' | let g:multi_cursor_save_selection = &selection | set selection=inclusive | endif
    autocmd User MultipleCursorsPost if exists('g:multi_cursor_save_selection') | let &selection = g:multi_cursor_save_selection | unlet g:multi_cursor_save_selection | endif
augroup END

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" =>  Asynchronous Lint Engine Plugin Config 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ale_linters_explicit = 1
let g:ale_linters = {
    \   'javascript': ['standard'],
    \   'python': ['black', 'mypy', 'valture'],
    \   'c':    ['clang-format'],
    \   'cpp':  ['clang-format'],
    \   'proto': ['prototool'],
    \}
let g:ale_fixers_explicit = 1
let g:ale_fixers = {
    \   'javascript': ['standard'],
    \   'python': ['black'],
    \   'c': ['clang-format'],
    \   'cpp': ['clang-format'],
    \}
let g:ale_fix_on_save = 1
let g:ale_python_vulture_options = '--min-confidence 80 --exclude "*pb2.py,*pb2_grpc.py,*.egg-info,dist/*,"'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" =>  fzf - a command-line fuzzy finder Plugin Config 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! s:find_git_root()
    return system('git rev-parse --show-toplevel 2> /dev/null')[:-2]
endfunction 

command! ProjectFiles execute 'Files' s:find_git_root() 
nmap <c-p> :ProjectFiles<CR>
" Customize fzf colors to match your color scheme 
let g:fzf_colors =
	\ { 'fg':    ['fg', 'Normal'],
	\ 'bg':      ['bg', 'Normal'],
	\ 'hl':      ['fg', 'Comment'],
	\ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
	\ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
	\ 'hl+':     ['fg', 'Statement'],
	\ 'info':    ['fg', 'PreProc'],
	\ 'border':  ['fg', 'Ignore'],
	\ 'prompt':  ['fg', 'Conditional'],
	\ 'pointer': ['fg', 'Exception'],
	\ 'marker':  ['fg', 'Keyword'],
	\ 'spinner': ['fg', 'Label'],
	\ 'header':  ['fg', 'Comment'] }

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => pangloss/vim-javascript Plugin Config 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let javascript_enable_domhtmlcss = 1
let g:javascript_plugin_jsdoc = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => fatih/vim-go Plugin Config 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-go seems to be the most popular Vim plugin for working with go 
" Open new Vim instance and run :GoInstallBinaries
" The default configuration for vim-go is tun :GoFmt
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1

"let g:go_def_mode = 'godef'
"let g:go_code_completion_enabled = 0
" Disable vim-go 'gd'
let g:go_def_mapping_enabled = 0
" :GoBuild - Compile package 
" :GoInstall - install 
" :GoTest - test 
" :GoTestFunc - Run a single test 
" :GoRun - Quickly execute current file 
" :GoDebugStart - Debug programs with integrated delve 
" :GoDef - Go to symbol/declaration  
" :GoDoc or :GoDocBrowser - Look up documentation 
" :GoImport or :GoDrop - Easily import packages 
" :GoRename - Precise type-safe renaming of identifiers 
" :GoCoverage - See which code is covered by test 
" :GoAddTags or :GoRemoveTags - Add or remove tags on struct fields 
" :GoLint - Lint your code 
" :GoVet: run your code through to catch static errors 
" :GoErrCheck - make sure errors are checked 

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => vim-python/python-syntax Plugin Config 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let python_highlight_all = 1
let python_slow_sync = 0

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => rust-lang/rust.vim Plugin Config 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" will enable automatic running of :RustFmt when your save a buffer
let g:rustfmt_autosave = 1 

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => vim-json Plugin Config 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:vim_json_syntax_conceal = 0

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => unblevable/quick-scope Plugin Config 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
highlight QuickScopePrimary ctermfg=119 cterm=underline guifg='#afff5f' gui=underline
highlight QuickScopeSecondary ctermfg=81 cterm=none guifg='#5fffff' gui=underline
" Max number of chars to highlight in one line. 
let g:qs_max_chars=180 
let g:qs_lazy_highlight = 1 
let g:qs_accepted_chars = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3',
    \ '4', '5', '6', '7', '8', '9']

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => junegunn/vim-slash Plugin Config 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has('timers')
    " Blink 2 times with 50ms interval 
    noremap <expr> <plug>(slash-after) slash#blink(2,50)
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => mhinz/vim-signify Plugin Config 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
highlight SignColumn ctermbg=NONE cterm=NONE guibg=NONE gui=NONE 
highlight SignifySignAdd ctermfg=yellow ctermbg=green guifg=#F7DC6F guibg=#1E8449
highlight SignifySignChange ctermfg=yellow ctermbg=blue guifg=#F7DC6F guibg=#2874A6
highlight SignifySignDelete ctermfg=yellow ctermbg=red guifg=#F7DC6F guibg=#EC7063

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => gabrielelana/vim-markdown Plugin Config 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:markdown_enable_spell_checking = 0 
let g:markdown_enable_conceal = 0


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => dyng/ctrlsf.vim Plugin Config 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Key Maps
" :CtrlSF [pattern] it will split a new window to show search result 
" if you are doing an asynchronous searching, you can explore and edit other files in the mewnwhile, and can always press Ctrl-C to stop searching
" In the result window, press O to open corresponding file, or press q to quit. 
" Press p to explore file in a preview window if you only want a glance.
" Press t open file in a new tab 
" Press P open file in a preview window and switch focus to it. 
" Press O leave CtrlSF window opening 
" Press T focus CtrlSF window instead of new opened tab 
" Press M switch result window between normal view and compact view 
" Press q quit CtrlSF window 
" <C-J> Move cursor to next match 
" <C-K> Move cursor to previous match 
" <C-C> Stop a backgroud searching process


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Mappings to easily toggle fold levels Plugin Config 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Mappings to easily toggle fold levels
nmap z0 :set foldlevel=0<CR>
nmap z1 :set foldlevel=1<CR>
nmap z2 :set foldlevel=2<CR>
nmap z3 :set foldlevel=3<CR>
nmap z4 :set foldlevel=4<CR>
nmap z5 :set foldlevel=5<CR>
nmap z6 :set foldlevel=6<CR>
nmap z7 :set foldlevel=7<CR>
nmap z8 :set foldlevel=8<CR>
nmap z99 :set foldlevel=99<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" some small tool 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap <F3> i<C-R>=strftime("%Y-%m-%d %a %I:%M %p")<CR><Esc>
imap <F3> <C-R>=strftime("%Y-%m-%d %a %I:%M %p")<CR>

" press jk to exit from insert mode
imap jk <Esc>

" Go To Definition 
set tags=tags 
" ctrl-] as default in vim
" autocmd BufWritePost *.py silent! !ctags -R --python-kinds=-i --languages=python 2&gt; /dev/null &amp;

" continuously locked
vnoremap < <gv
vnoremap > >gv

nnoremap <C-J> <C-W>j
nnoremap <C-K> <C-W>k
nnoremap <C-L> <C-W>l
nnoremap <C-H> <C-W>h

" Using tab pages 
" gt    go to next tab 
" gT    go to previous tab 
" {i}gt go to tab in position i 
nnoremap <C-Left> :tabprevious<CR>
nnoremap <C-Right> :tabnext<CR>
